
여기까지 Client사이드렌더링. UI렌더링을 모두 브라우저에서...(js모두 불러온다음에야 보여짐)


[서버사이드 렌더링]: yarn eject (webPack custom가능) -> src/index.server.js(ReactDOMserver) -> webpack/path.js(엔트리경로, 저장경로 지정)
-> config/webpack.config.server.js 이후 build설정 등등등 복잡..

* [remix] npx create-remix hello-remix -> yarn ->  yarn dev 실행
->app/routes/index.jsx가 실행시 화면(jsx는 그냥 js와 구분위해) -> app/routes/about.jsx: About() -> ~3000/about확인 
-> routes/index.js 수정 (<Link>로 about가져옴) -> f12의 network에서 localhost로 바로확인가능, about클릭시 전체재렌더링 안되는거확인 

-> [remix-param적용] routes/articles 폴더생성 -> $id.jsx생성( Article(), useParams) -> 3000/articles/100 으로 확인 

-> [remix] articles.jsx생성(<Outlet/>사용) -> 3000/articles로 Link확인

[remix-data불러오기]
가짜데이터: https://jsonplaceholder.typicode.com/users/10
-> yarn add axios( 비동기처리 ) -> lib/api.js 생성 -> 
routes/users/index.jsx생성( Users(), hook사용- loader, useLoaderData ) -> 3000/users로 확인 -> f12 users의 global변수인
window.__remixContext -> "loaderData"가 useLoaderData() 확인

[remix-사용자정보]
users/$id.jsx생성 -> 확인: 주소바뀌면(라우트이동) 이전라이트 ui화면이 나옴. remix"내부적"으로 경로요청 -> Remix"서버"가 loader실행 ->응답, 빌드시 클라이언트측 번들링 결과에 포함안됨, 사용자에게 절대 노출안됨

[remix- data쓰기]
권장: <Form>, json서버이용 -> data.json 생성 -> $ npx json-server ./data.json --port 4000 -d 500 ->  localhost:4000로 확인 -> api.js 추가 (getStories(), createStory() 등등)
-> stories/index.jsx 생성 ->   storiges/index.jsx (action함수(request파라미터 통해 요청한 데이터를 Form형태로 조회가능)만들어서 내보내기)

[remix- 쓰고난후 Form공백만들기]
useTransition통해 "submitting"상태에서 비워야함( vs onSubmit일때 하면 서버에 가기도 전에 없어짐; ) -> $id.jsx
-> stories/index.jsx 
(redirect()로 쓰고나서 이동) 

[remix- 배포]
yarn build -> yarn start (3000)

[next]
yarn create next-app hello-next,
npx create-next-app@latest -> npm run dev로 실행
+) 개발환경실행 npm run dev
배포 파일 생성 npm run build
서비스 시작 npm run start

-> hello-next로 이동 -> src/pages/index.js수정, css다 삭제ㅋ
-> 위의 build -> start -> 확인 후 끄기 -> dev실행 -> index.js(index추가추가)수정 ->
-> pages/sub/index.js( SubIndex() )생성 -> 똑같이 about도 추가
-> [id]도 똑같이 추가

[next - router로 param가져오기]
[id].js( useRouter()) 수정 

[next - param 응답받기]
pages/api/hello.js 확인(3000/api/hello) ->수정->확인


[next - 환경번수에 저장 ]
* http://localhost:3000/api/hello 는 서버주소, http://a.com/api/hello 는 실서버 주소
* https://nextjs.org/docs/basic-features/environment-variables
-> .env생성 -> npm run dev 재시작 -> pages/index.js추가(patch, NEXT_PUBLIC_API_URL 이용) -> 수정 (useState())

